{
  "mapStateToProps": {
    "prefix": "mstp",
    "body": [
      "const mapStateToProps = (state) => {",
      "\treturn {",
      "\t\t${1:propName}: state.$1$2,",
      "\t};",
      "};"
    ],
    "description": "Generate mapStateToProps function."
  },

  "mapDispatchToProps": {
    "prefix": "mdtp",
    "body": [
      "const mapDispatchToProps = (dispatch) => {",
      "\treturn {",
      "\t\t${1:propName}: () => {",
      "\t\t\tdispatch(${2:actionName}());",
      "\t\t},",
      "\t};",
      "};"
    ],
    "description": "Generate mapDispatchToProps function."
  },

  "connect": {
    "prefix": "con",
    "body": "connect(${1:mapStateToProps}, ${2:mapDispatchToProps})(${3:${TM_FILENAME_BASE}});",
    "description": "Connect with redux store."
  },

  "action": {
    "prefix": "act",
    "body": [
      "const ${1:ACTION_NAME} = (${2:ARG}) => {",
      "\treturn {",
      "\t\ttype: ${3:ACTION_TYPE},",
      "\t\tpayload: $2",
      "\t};",
      "};"
    ],
    "description": "Generate action creator."
  },

  "reducer": {
    "prefix": "rdc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = (state=${2:initialState}, action) => {",
      "\tswitch(action.type) {",
      "\t\tcase ${3:ACTION_TYPE}:",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t${4:${TM_FILENAME_BASE}}: action.payload",
      "\t\t\t};",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t};",
      "};"
    ],
    "description": "Generate reducer function."
  },

  "Import React": {
    "prefix": "imr",
    "body": ["import * as React from 'react';"],
    "description": "Import React"
  },

  "Import React and Component": {
    "prefix": "imrc",
    "body": [
      "import * as React from 'react';",
      "import { Component } from 'react';"
    ],
    "description": "Import React, { Component }"
  },

  "Import React, { useState }": {
    "prefix": "imrs",
    "body": [
      "import * as React from 'react';",
      "import { useState } from 'react';"
    ],
    "description": "Import React, { useState }"
  },

  "Import React, { useState, useEffect }": {
    "prefix": "imrse",
    "body": [
      "import * as React from 'react';",
      "import { useState, useEffect } from 'react';"
    ],
    "description": "Import React, { useState, useEffect }"
  },

  "Import Pure Component": {
    "prefix": "impc",
    "body": [
      "import * as React from 'react';",
      "import { PureComponent } from 'react';"
    ],
    "description": "Import React, { PureComponent }"
  },

  "Class Component": {
    "prefix": "cc",
    "body": [
      "export interface $1Props {",
      "\t$2",
      "}",
      " ",
      "export interface $1State {",
      "\t$3",
      "}",
      " ",
      "class $1 extends React.Component<$1Props, $1State> {",
      "\tstate = { $4: $5 }",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Class Component"
  },

  "Class Pure Component": {
    "prefix": "cpc",
    "body": [
      "export interface $1Props {",
      "\t$2",
      "}",
      " ",
      "export interface $1State {",
      "\t$3",
      "}",
      " ",
      "class $1 extends React.PureComponent<$1Props, $1State> {",
      "\tstate = { $4: $5 }",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Class Pure Component"
  },

  "Class Component Constructor": {
    "prefix": "ccc",
    "body": [
      "export interface $1Props {",
      "\t$2",
      "}",
      " ",
      "export interface $1State {",
      "\t$3",
      "}",
      " ",
      "class $1 extends React.Component<$1Props, $1State> {",
      "\tconstructor(props: $1Props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = { $4: $5 };",
      "\t}",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Class Component with Constructor"
  },

  "TypeScript Function Component": {
    "prefix": "tfc",
    "body": [
      "export interface ${1:${TM_FILENAME_BASE}}Props {",
      "\t$2",
      "}",
      " ",
      "const $1: React.FC<$1Props> = ($3) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Function Component"
  },

  "Function Component": {
    "prefix": "fc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = (${2:{ $4...}props }$3) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Function Component"
  },

  "Function Syntax Component": {
    "prefix": "ffc",
    "body": [
      "function ${1:${TM_FILENAME_BASE}}($2) {",
      "\treturn ( $0 );",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Function Syntax Component"
  },

  "bindThis": {
    "prefix": "bndt",
    "body": "this.$1 = this.$1.bind(this);$0",
    "description": "Binds the this of a method. To be used inside a constructor"
  },

  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}"],
    "description": "componentDidMount"
  },

  "componentWillMount": {
    "prefix": "cwm",
    "body": ["//WARNING! To be deprecated in React v17. Use componentDidMount instead.", "componentWillMount() {", "\t$0", "}"],
    "description": "componentWillMount"
  },

  "componentWillReceiveProps": {
    "prefix": "cwrp",
    "body": ["//WARNING! To be deprecated in React v17. Use new lifecycle static getDerivedStateFromProps instead.", "componentWillReceiveProps(nextProps: $1Props) {", "\t$0", "}"],
    "description": "componentWillReceiveProps"
  },

  "getDerivedStateFromProps": {
    "prefix": "gds",
    "body": ["static getDerivedStateFromProps(nextProps: $1Props, prevState: $1State) {", "\t$0", "}"],
    "description": "getDerivedStateFromProps"
  },

  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps: $1Props, nextState: $1State) {", "\t$0", "}"],
    "description": "shouldComponentUpdate"
  },

  "componentWillUpdate": {
    "prefix": "cwu",
    "body": ["//WARNING! To be deprecated in React v17. Use componentDidUpdate instead.", "componentWillUpdate(nextProps: $1Props, nextState: $1State) {", "\t$0", "}"],
    "description": "componentWillUpdate"
  },

  "componentDidUpdate": {
    "prefix": "cdu",
    "body": ["componentDidUpdate(prevProps: $1Props, prevState: $1State) {", "\t$0", "}"],
    "description": "componentDidUpdate"
  },

  "componentWillUnmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}"],
    "description": "componentWillUnmount"
  },

  "componentDidCatch": {
    "prefix": "cdc",
    "body": ["componentDidCatch(error, info) {", "\t$0", "}"],
    "description": "componentDidCatch"
  },

  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": ["getSnapshotBeforeUpdate(prevProps: $1Props, prevState: $1State) {", "\t$0", "}"],
    "description": "getSnapshotBeforeUpdate"
  },

  "setState": {
    "prefix": "ss",
    "body": ["this.setState({ $1: $2 });"],
    "description": "setState"
  },

  "Functional setState": {
    "prefix": "ssf",
    "body": ["this.setState(prevState => {", "\treturn { $1: prevState.$1 };", "});"],
    "description": "Functional setState"
  },

  "Declare a new state variable using State Hook": {
    "prefix": "ust",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"
    ],
    "description": "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
  },

  "render": {
    "prefix": "ren",
    "body": ["render() {", "\treturn (", "\t\t $0", "\t);", "}"],
    "description": "render"
  },

  "Render Prop": {
    "prefix": "rprop",
    "body": [
      "export interface $1Props {",
      "\trender: (state: $1State) => JSX.Element",
      "}",
      " ",
      "export interface $1State {",
      "\t$2",
      "}",
      " ",
      "class $1 extends React.Component<$1Props, $1State> {",
      "\tstate = { $3: $4 }",
      "\trender() { ",
      "\t\treturn this.props.render(this.state);",
      "\t}",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Render Prop"
  },

  "useEffect": {
    "prefix": "uef",
    "body": "useEffect(() => {\n$0\n})",
    "description": "Adds an effect"
  },

  "useEffectWatchList": {
    "prefix": "uefl",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, [$0]);"
    ],
    "description": "Adds an effect with watch list"
  },

  "useEffectDidMount": {
    "prefix": "uem",
    "body": "useEffect(() => {\n$0\n}, [])",
    "description": "Adds effect on mount"
  },

  "useEffectUnMount": {
    "prefix": "ueum",
    "body": "useEffect(() => {\n$0 return () => {\n$0\n\t}\n})",
    "description": "Adds effect on unmount"
  },

  "propTypes": {
    "prefix": "rpt",
    "body": "${1:$TM_FILENAME_BASE}.propTypes = {\n\t$2\n};",
    "description": "Creates empty propTypes declaration"
  },
  "defaultProps": {
    "prefix": "rdp",
    "body": "${1:$TM_FILENAME_BASE}.defaultProps = {\n\t$2\n};",
    "description": "Creates empty defaultProps declaration"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeSymbol": {
    "prefix": "ptsm",
    "body": "PropTypes.symbol,",
    "description": "Symbol prop type"
  },
  "propTypeSymbolRequired": {
    "prefix": "ptsmr",
    "body": "PropTypes.symbol.isRequired,",
    "description": "Symbol prop type required"
  },
  "propTypeAny": {
    "prefix": "ptan",
    "body": "PropTypes.any,",
    "description": "Any prop type"
  },
  "propTypeAnyRequired": {
    "prefix": "ptanr",
    "body": "PropTypes.any.isRequired,",
    "description": "Any prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  }
}
